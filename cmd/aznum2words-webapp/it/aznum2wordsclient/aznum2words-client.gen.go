// Package aznum2wordsclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package aznum2wordsclient

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// ConvertNumberToWords Convert number to words request representation
type ConvertNumberToWords struct {
	// Number The number to be converted to words
	Number string `json:"number"`
}

// ConvertWordsToNumber Convert words to number request representation
type ConvertWordsToNumber struct {
	// Words The words to be converted to number
	Words string `json:"words"`
}

// Error Representation of an Error that can appear using the application.
type Error struct {
	// Code The code of an error that describes the Error.
	Code string `json:"code"`

	// Message The message of an error that describes the Error.
	Message string `json:"message"`
}

// Number Words representation in number
type Number struct {
	// Number Words representation in number
	Number string `json:"number"`
}

// Word The number representation in words
type Word struct {
	// Words The number representation in words
	Words string `json:"words"`
}

// XCorrelationId defines model for x-correlation-id.
type XCorrelationId = string

// The following type declarations are intentionally commented out
//// ConvertNumberToWordsResponse The number representation in words
//type ConvertNumberToWordsResponse = Word
//
//// ConvertWordsToNumberResponse Words representation in number
//type ConvertWordsToNumberResponse = Number

// UnknownError Representation of an Error that can appear using the application.
type UnknownError = Error

// ConvertNumberToWordsRequest Convert number to words request representation
type ConvertNumberToWordsRequest = ConvertNumberToWords

// ConvertWordsToNumberRequest Convert words to number request representation
type ConvertWordsToNumberRequest = ConvertWordsToNumber

// ConvertWordsToNumberParams defines parameters for ConvertWordsToNumber.
type ConvertWordsToNumberParams struct {
	// XCorrelationId The unique request identifier
	XCorrelationId *XCorrelationId `json:"x-correlation-id,omitempty"`
}

// ConvertNumberToWordParams defines parameters for ConvertNumberToWord.
type ConvertNumberToWordParams struct {
	// XCorrelationId The unique request identifier
	XCorrelationId *XCorrelationId `json:"x-correlation-id,omitempty"`
}

// ConvertWordsToNumberJSONRequestBody defines body for ConvertWordsToNumber for application/json ContentType.
type ConvertWordsToNumberJSONRequestBody = ConvertWordsToNumber

// ConvertNumberToWordJSONRequestBody defines body for ConvertNumberToWord for application/json ContentType.
type ConvertNumberToWordJSONRequestBody = ConvertNumberToWords

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// AzNum2WordsClient which conforms to the OpenAPI3 specification for this service.
type AzNum2WordsClient struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*AzNum2WordsClient) error

// Creates a new AzNum2WordsClient, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*AzNum2WordsClient, error) {
	// create a client with sane default values
	client := AzNum2WordsClient{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *AzNum2WordsClient) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *AzNum2WordsClient) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ConvertWordsToNumber request with any body
	ConvertWordsToNumberWithBody(ctx context.Context, params *ConvertWordsToNumberParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConvertWordsToNumber(ctx context.Context, params *ConvertWordsToNumberParams, body ConvertWordsToNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConvertNumberToWord request with any body
	ConvertNumberToWordWithBody(ctx context.Context, params *ConvertNumberToWordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConvertNumberToWord(ctx context.Context, params *ConvertNumberToWordParams, body ConvertNumberToWordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *AzNum2WordsClient) ConvertWordsToNumberWithBody(ctx context.Context, params *ConvertWordsToNumberParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertWordsToNumberRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *AzNum2WordsClient) ConvertWordsToNumber(ctx context.Context, params *ConvertWordsToNumberParams, body ConvertWordsToNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertWordsToNumberRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *AzNum2WordsClient) ConvertNumberToWordWithBody(ctx context.Context, params *ConvertNumberToWordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertNumberToWordRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *AzNum2WordsClient) ConvertNumberToWord(ctx context.Context, params *ConvertNumberToWordParams, body ConvertNumberToWordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertNumberToWordRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *AzNum2WordsClient) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewConvertWordsToNumberRequest calls the generic ConvertWordsToNumber builder with application/json body
func NewConvertWordsToNumberRequest(server string, params *ConvertWordsToNumberParams, body ConvertWordsToNumberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConvertWordsToNumberRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConvertWordsToNumberRequestWithBody generates requests for ConvertWordsToNumber with any type of body
func NewConvertWordsToNumberRequestWithBody(server string, params *ConvertWordsToNumberParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/conversion/to-number")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCorrelationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-correlation-id", runtime.ParamLocationHeader, *params.XCorrelationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-correlation-id", headerParam0)
	}

	return req, nil
}

// NewConvertNumberToWordRequest calls the generic ConvertNumberToWord builder with application/json body
func NewConvertNumberToWordRequest(server string, params *ConvertNumberToWordParams, body ConvertNumberToWordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConvertNumberToWordRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConvertNumberToWordRequestWithBody generates requests for ConvertNumberToWord with any type of body
func NewConvertNumberToWordRequestWithBody(server string, params *ConvertNumberToWordParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/conversion/to-word")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCorrelationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-correlation-id", runtime.ParamLocationHeader, *params.XCorrelationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-correlation-id", headerParam0)
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *AzNum2WordsClient) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *AzNum2WordsClient) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ConvertWordsToNumber request with any body
	ConvertWordsToNumberWithBodyWithResponse(ctx context.Context, params *ConvertWordsToNumberParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertWordsToNumberResponse, error)

	ConvertWordsToNumberWithResponse(ctx context.Context, params *ConvertWordsToNumberParams, body ConvertWordsToNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertWordsToNumberResponse, error)

	// ConvertNumberToWord request with any body
	ConvertNumberToWordWithBodyWithResponse(ctx context.Context, params *ConvertNumberToWordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertNumberToWordResponse, error)

	ConvertNumberToWordWithResponse(ctx context.Context, params *ConvertNumberToWordParams, body ConvertNumberToWordJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertNumberToWordResponse, error)

	// GetHealth request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)
}

type ConvertWordsToNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Number
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ConvertWordsToNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertWordsToNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConvertNumberToWordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Word
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ConvertNumberToWordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertNumberToWordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ConvertWordsToNumberWithBodyWithResponse request with arbitrary body returning *ConvertWordsToNumberResponse
func (c *ClientWithResponses) ConvertWordsToNumberWithBodyWithResponse(ctx context.Context, params *ConvertWordsToNumberParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertWordsToNumberResponse, error) {
	rsp, err := c.ConvertWordsToNumberWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertWordsToNumberResponse(rsp)
}

func (c *ClientWithResponses) ConvertWordsToNumberWithResponse(ctx context.Context, params *ConvertWordsToNumberParams, body ConvertWordsToNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertWordsToNumberResponse, error) {
	rsp, err := c.ConvertWordsToNumber(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertWordsToNumberResponse(rsp)
}

// ConvertNumberToWordWithBodyWithResponse request with arbitrary body returning *ConvertNumberToWordResponse
func (c *ClientWithResponses) ConvertNumberToWordWithBodyWithResponse(ctx context.Context, params *ConvertNumberToWordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertNumberToWordResponse, error) {
	rsp, err := c.ConvertNumberToWordWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertNumberToWordResponse(rsp)
}

func (c *ClientWithResponses) ConvertNumberToWordWithResponse(ctx context.Context, params *ConvertNumberToWordParams, body ConvertNumberToWordJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertNumberToWordResponse, error) {
	rsp, err := c.ConvertNumberToWord(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertNumberToWordResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// ParseConvertWordsToNumberResponse parses an HTTP response from a ConvertWordsToNumberWithResponse call
func ParseConvertWordsToNumberResponse(rsp *http.Response) (*ConvertWordsToNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConvertWordsToNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Number
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConvertNumberToWordResponse parses an HTTP response from a ConvertNumberToWordWithResponse call
func ParseConvertNumberToWordResponse(rsp *http.Response) (*ConvertNumberToWordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConvertNumberToWordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Word
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXz2/bNhT+VwhuR8VS00vhW1YMW1GgHYoMPXQ+0NKzxVQiWfIpmRvofx8eKVuSRdlZ",
	"4twS6en7vvf7+ZHnujZagULHl4/cCCtqQLD+v3+vcm0tVAKlVleyoGcFuNxKQ0/4kt+WwBolfzTALPxo",
	"wCGTBSiUGwn2H8UTLsmsBFGA5QlXoga+nAIn3OUl1IIYcGfIxqGVasvbtk14h/2bLiR4Ze+1ugeLn5p6",
	"DfZWf9W2cF+CEb3OtUJQ/k9hTCVzT5TeORL9OOD61cKGL/kvaR+GNLx1aYyjlyMtFHyJtoE22cvxJrc6",
	"fPFKckYcUTn+iTNauVOxCgYXU0eoQc24QD5/5LPxubCEYUhiIv5W35V+UL9bq+3FSANahDN0hmdkQEZM",
	"GAPCQrFg70vIv7OdbiwzYldpUTBtGekROTLXGKMtLjiBdjxzeZx2ZGfFlDdjqNkDGR7a04Kx4ECh95Yn",
	"3FhtwGLXWOGzeKP3kGsgtcQDxYGCJ5PWHdbmtz326mCn13eQ41yBzPsWPEK9V/RE3x7iESPXDojHnnWa",
	"z7kWoGOeHcptTPplJJXpDROKeVuGpUCWC9UVDGucVFuGJbBBmS4m3uW6gLhz9KZjgJ4h2K3BeWhPvZj6",
	"mfAanBPbGeju5XPRj6LoXegZY+GcK42vXZGPoipVn7+nlflZmGdXuB+Qp9pqSrrvqidX8Vmk5xUx2Um1",
	"0VPSm78+sE0YXdQyVKfHc0cqdvMT7FrIO6GkPwlQYkX4Nz8/NfV1CLkDey9zyv49WBfQs0W2eEOx0waU",
	"MJIv+dtFtnhLIRFY+iCkwsj0/k0aFNCHKeqrPr3Dg+ZbfJT3JunkLmlXCTc6bPFTs2js5WhwUO483oei",
	"/2w86IYHzm5u44xuoPTUxXF8AFxn2TxoZ5eeXNF+u21EU+F5oNGa9SusqWthd/8nZii2lK9hhfAVYcXT",
	"/dD11qsn+3RxzyV7uLFfkOvosfuSXMcvwgvn+mzI5nNdgqiwJBVbwNgKxcYqxwS7zjL2+SPb62Jy47dO",
	"N1OYdCxA7SYZ+gPwz8ASj+N0xkZAjxz3xx3xh/e0GwdqBh53zCs/YOn1vnAbW9GPJkSzTNNK56IqtcPl",
	"u+xd5ou0A3jxNO5/kA2D3yYxYN8o4SY65VuH17nWrtr/AgAA//8L6UCcYg4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
