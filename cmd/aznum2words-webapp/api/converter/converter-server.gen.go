// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package converter

import (
	"fmt"
	. "github.com/egasimov/aznum2words/cmd/aznum2words-webapp/api/converter/models"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Convert words in Azerbaijani to number
	// (POST /api/v1/conversion/to-number)
	ConvertWordsToNumber(ctx echo.Context, params ConvertWordsToNumberParams) error
	// Convert number to words in Azerbaijani
	// (POST /api/v1/conversion/to-word)
	ConvertNumberToWord(ctx echo.Context, params ConvertNumberToWordParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ConvertWordsToNumber converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertWordsToNumber(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ConvertWordsToNumberParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x-correlation-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-correlation-id")]; found {
		var XCorrelationId XCorrelationId
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-correlation-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-correlation-id", runtime.ParamLocationHeader, valueList[0], &XCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-correlation-id: %s", err))
		}

		params.XCorrelationId = &XCorrelationId
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertWordsToNumber(ctx, params)
	return err
}

// ConvertNumberToWord converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertNumberToWord(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ConvertNumberToWordParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x-correlation-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-correlation-id")]; found {
		var XCorrelationId XCorrelationId
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-correlation-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-correlation-id", runtime.ParamLocationHeader, valueList[0], &XCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-correlation-id: %s", err))
		}

		params.XCorrelationId = &XCorrelationId
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertNumberToWord(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/conversion/to-number", wrapper.ConvertWordsToNumber)
	router.POST(baseURL+"/api/v1/conversion/to-word", wrapper.ConvertNumberToWord)

}
