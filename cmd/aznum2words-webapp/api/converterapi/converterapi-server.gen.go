// Package converterapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package converterapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	. "github.com/egasimov/aznum2words/cmd/aznum2words-webapp/api/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Convert words in Azerbaijani to number
	// (POST /api/v1/conversion/to-number)
	ConvertWordsToNumber(ctx echo.Context, params ConvertWordsToNumberParams) error
	// Convert number to words in Azerbaijani
	// (POST /api/v1/conversion/to-word)
	ConvertNumberToWord(ctx echo.Context, params ConvertNumberToWordParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ConvertWordsToNumber converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertWordsToNumber(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ConvertWordsToNumberParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x-correlation-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-correlation-id")]; found {
		var XCorrelationId XCorrelationId
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-correlation-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-correlation-id", runtime.ParamLocationHeader, valueList[0], &XCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-correlation-id: %s", err))
		}

		params.XCorrelationId = &XCorrelationId
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertWordsToNumber(ctx, params)
	return err
}

// ConvertNumberToWord converts echo context to params.
func (w *ServerInterfaceWrapper) ConvertNumberToWord(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ConvertNumberToWordParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "x-correlation-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-correlation-id")]; found {
		var XCorrelationId XCorrelationId
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-correlation-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-correlation-id", runtime.ParamLocationHeader, valueList[0], &XCorrelationId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-correlation-id: %s", err))
		}

		params.XCorrelationId = &XCorrelationId
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConvertNumberToWord(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/conversion/to-number", wrapper.ConvertWordsToNumber)
	router.POST(baseURL+"/api/v1/conversion/to-word", wrapper.ConvertNumberToWord)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXTW/jNhD9KwTboyJ5dy8L3dJFgS4KbIsgRQ5pDrQ0tphIJDOk7DqG/nsxpGxZlmRn",
	"E+eWSKP33nyPtzzTldEKlLM83XIjUFTgAP1//11lGhFK4aRWVzKnZznYDKWhJzzltwWwWsnnGhjCcw3W",
	"MZmDcnIhAf9VPOKSzAoQOSCPuBIV8HQIHHGbFVAJYnAbQzbWoVRL3jRNxFvs33QuwSv7ptUK0P2oqzng",
	"rb7TmNubYESvM60cKP+nMKaUmSdKHi2J3h5w/Yqw4Cn/JenCkIS3Nhnj6ORIhJynDmtoop0cb3Krwxcf",
	"JKfHMSrHP7FGK3sqVsHgYuoINajpF8hff/LJ+FxYwmFIxkT8o56UXqvfETVejDSgjXCGzvCMDMiICWNA",
	"IOQx+1ZA9sQ2ukZmxKbUImcaGekRmWO2NkajizmBtjxTeRx2ZGvFlDdjTrM1Ge7bE8EgWFDOe8sjblAb",
	"QNc2VvhsvNE7yDmQWuKBfE/Bo0HrHtbm/Q77YW+n54+QuakCmfYteOT0TtErfVuPR4xc2yMee9ZqPuda",
	"gB7zbF9ufdKbnlSmF0wo5m2ZK4RjmVBtwbDaSrVkrgB2UKbxwLtM5zDuHL1pGaBjCHZzsB7aU8dDPyNe",
	"gbViOQHdvnwr+lEUvQsd41g4p0rjri3yXlSl6vL3ujI/C/PmCvcD8lRbDUl3XfXqKj6L9LYiJjupFnpI",
	"ev33d7YIo4tahur0eO5Ixa5fAOdCPgol/UngpCsJ//rlR119DiG3gCuZUfZXgDagz+JZ/Ilipw0oYSRP",
	"+Zd4Fn+hkAhX+CAkwshk9SkJCujDxOmrLr2HB839+CjvTJLBXdI8RNzosMVPzaK+l73BQbnzeN/z7rP+",
	"oDs8cDZTG6d3AyWnLo7jA+DzbDYN2tolJ1e0324LUZfuPFBvzfoVVleVwM3PxMyJJeVr9wG1FCGNJ3vd",
	"dtaHp/p0aU+l+nBfvyPTo6fuezI9fg9eONNnQzaV6QJE6Qqebj0u4GqX1hpL+kHhnEmTpNSZKAttXfp1",
	"9nXmU9gCvntSdT9WOmlNNAbriyhcC7TrgnJhJC1FetCNthbwj+Bb89D8HwAA//+S3/jFfw0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
